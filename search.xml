<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot进行Web开发</title>
    <url>/2020/10/30/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="SpringBoot进行Web开发"><a href="#SpringBoot进行Web开发" class="headerlink" title="SpringBoot进行Web开发"></a>SpringBoot进行Web开发</h1><h2 id="SpringBoot应用创建"><a href="#SpringBoot应用创建" class="headerlink" title="SpringBoot应用创建"></a>SpringBoot应用创建</h2><p><strong>1、创建SpringBoot应用，选中需要的模块；</strong></p>
<p><strong>2、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3、自己编写业务代码</strong></p>
<a id="more"></a>

<h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xxxAutoConfiguration:帮我们给容器中自动配置组件</span><br><span class="line">xxxProperties:配置类来封装配置文件的内容</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Springb对静态资源的映射规则"><a href="#Springb对静态资源的映射规则" class="headerlink" title="Springb对静态资源的映射规则"></a>Springb对静态资源的映射规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(WebMvcAutoConfiguration.getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1、所有-webjars-，都去classpath-META-INF-resources-webjars-找资源；"><a href="#1、所有-webjars-，都去classpath-META-INF-resources-webjars-找资源；" class="headerlink" title="1、所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；"></a>1、所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</h4><p>webjars:以jar包的方式引入静态资源；</p>
<p>webjars官网：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p>
<p>可以把一些框架以依赖的方式拿过来</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029102937963.png" alt="image-20201029102937963"></p>
<p>可以在pom.xml中直接导入(例如导入jquery)；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029102858899.png" alt="image-20201029102858899"></p>
<p>访问路径示例：localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<hr>
<h4 id="2、”-”访问当前项目的任何资源（静态资源的文件夹）"><a href="#2、”-”访问当前项目的任何资源（静态资源的文件夹）" class="headerlink" title="2、”/**”访问当前项目的任何资源（静态资源的文件夹）"></a>2、”/**”访问当前项目的任何资源（静态资源的文件夹）</h4><p>这些路径都可以存放静态资源，并可以被访问到；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;classpath:&#x2F;META-INF&#x2F;resources&#x2F;&quot;,</span><br><span class="line">&quot;classpath:resources&#x2F;&quot;,</span><br><span class="line">&quot;classpath:&#x2F;static&quot;,</span><br><span class="line">&quot;classpath:&#x2F;public&quot;,</span><br><span class="line">&quot;&#x2F;&quot;当前项目的根路径</span><br></pre></td></tr></table></figure>

<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029104201381.png" alt="image-20201029104201381"></p>
<hr>
<h4 id="3、欢迎页映射-静态资源文件夹下的所有index-html页面；"><a href="#3、欢迎页映射-静态资源文件夹下的所有index-html页面；" class="headerlink" title="3、欢迎页映射,静态资源文件夹下的所有index.html页面；"></a>3、欢迎页映射,静态资源文件夹下的所有index.html页面；</h4><p>被”/**”映射；</p>
<p>举例：localhost:8080/  会找index.html页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">           WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, <span class="keyword">this</span>.getWelcomePage(), <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">           welcomePageHandlerMapping.setInterceptors(<span class="keyword">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">           welcomePageHandlerMapping.setCorsConfigurations(<span class="keyword">this</span>.getCorsConfigurations());</span><br><span class="line">           <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="4、所有的-favicon-ico都在静态资源文件下找"><a href="#4、所有的-favicon-ico都在静态资源文件下找" class="headerlink" title="4、所有的**/favicon.ico都在静态资源文件下找"></a>4、所有的**/favicon.ico都在静态资源文件下找</h4><p>可以自定义资源文件夹；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029110156876.png" alt="image-20201029110156876"></p>
<hr>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎有：Jsp、Velocity、Freemarker、Thymeleaf</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029110445780.png" alt="image-20201029110445780"></p>
<p>SpringBoot推荐Thymeleaf;</p>
<p>语法简单，功能强大；</p>
<hr>
<h3 id="1、引入Thymeleaf"><a href="#1、引入Thymeleaf" class="headerlink" title="1、引入Thymeleaf"></a>1、引入Thymeleaf</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2、Thymeleaf使用-amp-语法"><a href="#2、Thymeleaf使用-amp-语法" class="headerlink" title="2、Thymeleaf使用&amp;语法"></a>2、Thymeleaf使用&amp;语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;<span class="comment">//默认前缀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;<span class="comment">//默认后缀</span></span><br></pre></td></tr></table></figure>

<p>只要把html页面放在classpath:templates/,thymeleaf就能自动渲染；</p>
<h4 id="使用；"><a href="#使用；" class="headerlink" title="使用；"></a>使用；</h4><h5 id="1、导入thymeleaf的名称空间"><a href="#1、导入thymeleaf的名称空间" class="headerlink" title="1、导入thymeleaf的名称空间"></a>1、导入thymeleaf的名称空间</h5><p>有语法提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmls:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="2、使用thymeleaf的语法"><a href="#2、使用thymeleaf的语法" class="headerlink" title="2、使用thymeleaf的语法"></a>2、使用thymeleaf的语法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmls:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:xmls</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xmls</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th:text将div里面的文本内容设置为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是要显示的信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="3、thymeleaf语法规则"><a href="#3、thymeleaf语法规则" class="headerlink" title="3、thymeleaf语法规则"></a>3、thymeleaf语法规则</h5><p>1）、th:text  改变当前元素里面呢的语法规则；</p>
<p>2）、th:(任意html属性)   可以替换任意原生属性的值；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029113816462.png" alt="image-20201029113816462"></p>
<hr>
<p>3）、语法使用</p>
<p>${}:获取变量值；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029160614133.png" alt="image-20201029160614133"></p>
<p>#{}：使用内置的基本对象，内置的一些工具对象；</p>
<hr>
<p>*{}：和&amp;{}功能一样，不过可以配合th:object=”${}”使用；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029160926860.png" alt="image-20201029160926860"></p>
<hr>
<p>@{}:可以定义URL；</p>
<p>~{}：片段引用表达式；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161225354.png" alt="image-20201029161225354"></p>
<hr>
<p>Literals:字面量；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161456817.png" alt="image-20201029161456817"></p>
<hr>
<p>Text operations:文本操作；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161551542.png" alt="image-20201029161551542"></p>
<hr>
<p>Arithmetic operations:数学运算；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161638732.png" alt="image-20201029161638732"></p>
<hr>
<p>Boolean operations:布尔运算；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161711412.png" alt="image-20201029161711412"></p>
<hr>
<p>Comparisons and equality:比较运算；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161817740.png" alt="image-20201029161817740"></p>
<hr>
<p>Conditional operations:条件运算，可以使用三元运算符；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029161857695.png" alt="image-20201029161857695"></p>
<hr>
<p>Special tokens:特殊操作，比如在三元运算中，符合条件后不想接下来有操作，就可以填写这个（_）；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029162011319.png" alt="image-20201029162011319"></p>
<hr>
<p>行内语法：</p>
<p>可以使用[[…]]：相当于th:text,会转义特殊字符；</p>
<p>或者[(..)]：相当于th:utext,不会转义特殊字符；</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029162612306.png" alt="image-20201029162612306"></p>
<p>举例：</p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029162749341.png" alt="image-20201029162749341"></p>
<hr>
<h2 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h2><p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029164040213.png" alt="image-20201029164040213"></p>
<hr>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029164435219.png" alt="image-20201029164435219"></p>
<hr>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029164751107.png" alt="image-20201029164751107"></p>
<hr>
<h3 id="扩展SpirngMVC"><a href="#扩展SpirngMVC" class="headerlink" title="扩展SpirngMVC"></a>扩展SpirngMVC</h3><p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029165445615.png" alt="image-20201029165445615"></p>
<p>1、编写一个配置类（@Configuration),是WebMvcConfigurerAdapter类型；且不能标注@EnableWebMvc;</p>
<p>既保留了所有的自动配置，也能用扩展的配置；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以扩展SpirngMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送/hello请求，来到success页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029170600971.png" alt="image-20201029170600971"></p>
<p>3）、容器中所有的WebMvcConfigurer都会一起作用；</p>
<p>4）、自定义的配置类也会跟着被调用；</p>
<h4 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h4><p>SpringMVC的自动配置和自定义配置都会起作用；</p>
<hr>
<h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC;"></a>全面接管SpringMVC;</h3><p>SpringBoot不需要对SpringMVC进行自动配置了，使用自定义的配置，只需要在配置类中添加@EnableWebMvc即可；此时所有的SpringMVC的自动配置都失效了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以扩展SpirngMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc全面接管SpirngMVC</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送/hello请求，来到success页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h4><p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029172006905.png" alt="image-20201029172006905"></p>
<p><img src="/images/SpringBoot%E8%BF%9B%E8%A1%8CWeb%E5%BC%80%E5%8F%91.assets/image-20201029172142130.png" alt="image-20201029172142130"></p>
<hr>
<h2 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h2><h3 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h3><p>1、SpringBoot在自动配置组件时，先从容器中看有没有自定义配置的（@Bean、@Component）,如果有，则使用用户的配置，如果没有，就自动配置；如果某些组件允许有多个组件，就会将自定义的配置和SpringBoot的配置组合起来；</p>
<p>2、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置；</p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot中日志框架</title>
    <url>/2020/10/29/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="日志使用"><a href="#日志使用" class="headerlink" title="日志使用"></a>日志使用</h1><blockquote>
<p><code>SpringBoot</code>使用<code>SLF4j</code>和<code>logback</code></p>
</blockquote>
<h2 id="一、如何在系统中使用SLF4j"><a href="#一、如何在系统中使用SLF4j" class="headerlink" title="一、如何在系统中使用SLF4j"></a>一、如何在系统中使用<code>SLF4j</code></h2><p>不调用日志的实现类，而是调用日志抽象层的方法,;</p>
<p>给系统里面导入<code>slf4j</code>的jar和<code>logback</code>的jar;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>图示；</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026151123581-1603696978850.png" alt="image-20201026151123581"></p>
<p>每一个日志的实现框架都有自己的配置文件；</p>
<p>使用<code>slf4j</code>以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件</strong>；</p>
<hr>
<h2 id="二、统一日志记录"><a href="#二、统一日志记录" class="headerlink" title="二、统一日志记录"></a>二、统一日志记录</h2><p>统一日志记录，让别的框架也使用<code>slf4j</code>进行日志输出</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026152224411.png" alt="image-20201026152224411"></p>
<hr>
<h3 id="让系统中的所有日志统一到slfj4"><a href="#让系统中的所有日志统一到slfj4" class="headerlink" title="让系统中的所有日志统一到slfj4"></a>让系统中的所有日志统一到<code>slfj4</code></h3><p><strong>1、将系统中的其他日志框架排除出去；</strong></p>
<p><strong>2、用中间包来替换原有的日志框架；</strong></p>
<p><strong>3、导入<code>slf4j</code>相关的实现包；</strong></p>
<hr>
<h3 id="SpringBoot日志关系"><a href="#SpringBoot日志关系" class="headerlink" title="SpringBoot日志关系"></a><code>SpringBoot</code>日志关系</h3><p><code>SpringBoot</code>每一个启动器都要依赖这个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>SpringBoot</code>使用<code>spring-boot-starter-logging</code>来做日志功能；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>底层依赖关系：<img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026163337989.png" alt="image-20201026163337989"></p>
<p>总结：</p>
<p>​    1）、SpringBoot底层也是用的slf4j+logback进行日志记录；</p>
<p>​    2）、SpringBoot把其他的日志替换成了slf4j;</p>
<p>​    3）、中间替换包：</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026163805227.png" alt="image-20201026163805227"></p>
<p>​    4）、要引入其他框架，得把该框架下的日志框架移除；</p>
<p><code>Spring</code>框架用的是commons-logging;</p>
<p>所以Spring框架也是先移除了自己的commons-logging框架</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026164205577.png" alt="image-20201026164205577"></p>
<p><code>SpringBoot</code>能够适配所有的框架，我们在导入其他框架的时候，只需要将该框架下依赖的日志框架排除就可以；</p>
<hr>
<h2 id="三、日志使用"><a href="#三、日志使用" class="headerlink" title="三、日志使用"></a>三、日志使用</h2><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><p>SpringBoot默认帮我们配好了日志，直接使用即可；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">   Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//日志的级别</span></span><br><span class="line">       <span class="comment">//由低到高 trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">       <span class="comment">//可以调整输出日志级别，日志只会在该级别及比他高的级别生效</span></span><br><span class="line">       logger.trace(<span class="string">"这是trace信息..."</span>);</span><br><span class="line">       logger.debug(<span class="string">"这是debug信息..."</span>);</span><br><span class="line">       <span class="comment">//SpringBoot默认使用的是info级别，没有指定就会使用SpringBoot规定的默认级别</span></span><br><span class="line">       logger.info(<span class="string">"这是info信息..."</span>);</span><br><span class="line">       logger.warn(<span class="string">"这是warn信息..."</span>);</span><br><span class="line">       logger.error(<span class="string">"这是error信息..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以在application.properties中修改日志级别</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将com.cenmingzhong包下的级别指定变成trace级别</span></span><br><span class="line"><span class="meta">logging.level.com.cenmingzhong</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>

<p>可以在application.properties中指定日志保存地址</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在当前磁盘的跟路径下创建spring文件夹和里面的log文件夹,在Log文件夹生成spring.log文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以指定完整的路径</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果logging.path= 后面不加地址，则默认在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在控制台输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125;[%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure>

<p>日期输出格式：</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201026170905666.png" alt="image-20201026170905666"></p>
<p>SpringBoot日志修改的默认配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将com.cenmingzhong包下的级别指定变成trace级别</span></span><br><span class="line"><span class="meta">logging.level.com.cenmingzhong</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在当前磁盘的跟路径下创建spring文件夹和里面的log文件夹,在Log文件夹生成spring.log文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以指定完整的路径</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果logging.path= 后面不加地址，则默认在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在控制台输出日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125;[%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === logger&#123;50&#125; === %msg%n</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a>指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot接着就会不使用自己的默认配置；</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201028192353117.png" alt="image-20201028192353117"></p>
<p>logback.xml:直接就被日志框架识别了；</p>
<p>logback-spring.xml:日志框架不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能；</p>
<p>在<strong>logback-spring.xml</strong>下可以使用SpringProfile功能；</p>
<p>推荐使用<strong>logback-spring.xml</strong>;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SpringProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">//可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">SpringProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">        %d 表示日期时间</span></span><br><span class="line"><span class="comment">        %thread 表示线程名</span></span><br><span class="line"><span class="comment">        %-5level 级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按句点分隔</span></span><br><span class="line"><span class="comment">        %msg 日志消息</span></span><br><span class="line"><span class="comment">        %n 换行符 </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ----&gt; %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ----&gt; %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="切换日志框架（以log4j为例）"><a href="#切换日志框架（以log4j为例）" class="headerlink" title="切换日志框架（以log4j为例）"></a>切换日志框架（以log4j为例）</h3><p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1、排除其他日志框架；</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201029090501809.png" alt="image-20201029090501809"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.导入中间适应层；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.导入日志框架的配置文件log4j.properties;</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置日志等级</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug , stdout, D, E</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出到控制台</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Targer</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125;====%5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出到日志文件</span></span><br><span class="line"><span class="comment">#log4j.appender.D=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.D.File=logs/log.log</span></span><br><span class="line"><span class="comment">#log4j.appender.D.Append=true</span></span><br><span class="line"><span class="comment">#log4j.appender.D.Threshold=DEBUG###输出DEBUG级别以上的日志</span></span><br><span class="line"><span class="comment">#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.D.layout.ConversionPattern=%d&#123;ABSOLUTE&#125;====%5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存异常信息到单独文件</span></span><br><span class="line"><span class="comment">#log4j.appender.D=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.D.File=logs/error.log</span></span><br><span class="line"><span class="comment">#log4j.appender.D.Append=true</span></span><br><span class="line"><span class="comment">#log4j.appender.D.Threshold=DEBUG###输出DEBUG级别以上的日志</span></span><br><span class="line"><span class="comment">#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.D.layout.ConversionPattern=%d&#123;ABSOLUTE&#125;====%5p %c&#123;1&#125;:%L - %m%n</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="切换为log4j2"><a href="#切换为log4j2" class="headerlink" title="切换为log4j2"></a>切换为log4j2</h3><p>1.排除原有的spring-boot-starter-logging;</p>
<p><img src="/images/%E6%97%A5%E5%BF%97%E4%BD%BF%E7%94%A8.assets/image-20201029092831016.png" alt="image-20201029092831016"></p>
<p>2.导入spring-boot-starter-log4j2中间包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.在类路径下写配置文件；</p>
<p>推荐用<strong>log4j2-spring.xml</strong>;</p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot学习笔记（创建SpringBoot项目）</title>
    <url>/2020/10/25/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SpringBoot学习笔记（创建SpringBoot项目）"><a href="#SpringBoot学习笔记（创建SpringBoot项目）" class="headerlink" title="SpringBoot学习笔记（创建SpringBoot项目）"></a>SpringBoot学习笔记（创建SpringBoot项目）</h1><blockquote>
<p><strong>创建一个<code>SpringBoot</code>项目</strong>；</p>
</blockquote>
<hr>
<h2 id="第一步：创建maven项目-（jar）"><a href="#第一步：创建maven项目-（jar）" class="headerlink" title="第一步：创建maven项目;（jar）"></a>第一步：创建<code>maven</code>项目;（jar）</h2><p>1、创建新项目；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025112513388.png" alt="image-20201025112513388"></p>
<hr>
<p>2、选择<code>maven</code>项目；</p>
<h4 id=""><a href="#" class="headerlink" title=""></a><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025112802888.png" alt="image-20201025112802888"></h4><hr>
<p>3、填写名字；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025113212124.png" alt="image-20201025113212124"></p>
<hr>
<p>4、选择<code>maven</code>自动导入；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025113409182.png" alt="image-20201025113409182"></p>
<hr>
<p>5、选择设置；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025121253840.png" alt="image-20201025121253840"></p>
<hr>
<p>6、将maven设置为本地配置好的；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025121352800.png" alt="image-20201025121352800"></p>
<hr>
<h2 id="第二步、导入SpringBoot相关的依赖；"><a href="#第二步、导入SpringBoot相关的依赖；" class="headerlink" title="第二步、导入SpringBoot相关的依赖；"></a>第二步、导入SpringBoot相关的依赖；</h2><p>1、导入依赖；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025125546542.png" alt="image-20201025125546542"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、编写一个主程序；（启动SpringBoot应用）"><a href="#3、编写一个主程序；（启动SpringBoot应用）" class="headerlink" title="3、编写一个主程序；（启动SpringBoot应用）"></a>3、编写一个主程序；（启动SpringBoot应用）</h2><p>1、新建<strong>HelloWorldMainApplicaiton.java</strong>；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025130806777.png" alt="image-20201025130806777"></p>
<hr>
<p>2.给<strong>HelloWorldMainApplication</strong>添加<code>@SpringBootApplication</code>注解:来标注一个主程序类，说明这是一个<code>SpringBoot</code>应用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cenmingzhong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cenmingzhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>:来标注一个主程序类，说明这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-10-25-下午 13:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4、编写相关的Controller、Service；"><a href="#4、编写相关的Controller、Service；" class="headerlink" title="4、编写相关的Controller、Service；"></a>4、编写相关的Controller、Service；</h2><p>1、新建<strong>HelloController.java</strong>；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025131837760.png" alt="image-20201025131837760"></p>
<hr>
<p>2.使用<code>@Controller</code>注解来讲<strong>HelloController.java</strong>加入容器，使用<code>@RequestMapping(&quot;/hello&quot;)</code>注解来接收来自浏览器的<strong>hello</strong>请求,使用<code>@ResponseBody</code>注解来将数据返回到浏览器；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cenmingzhong.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cenmingzhong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-10-25-下午 13:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5、运行主程序进行测试；"><a href="#5、运行主程序进行测试；" class="headerlink" title="5、运行主程序进行测试；"></a>5、运行主程序进行测试；</h2><p>1、在<strong>HelloWorldMainApplication.java</strong>点击三角形符号，运行项目；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025132950283.png" alt="image-20201025132950283"></p>
<hr>
<p>2、可以在控制台看到运行信息，可以看到Tomcat已经启动，8080端口，因为有内嵌Tomcat，所以不需要配置Tomcat；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025133247789.png" alt="image-20201025133247789"></p>
<hr>
<p>3、访问<strong>localhost:8080/hello</strong>,可以正常访问，也正常返回<code>返回值</code>；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025133643558.png" alt="image-20201025133643558"></p>
<hr>
<h2 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h2><p>1、导入插件，将应用打包成一个可执行的jar包；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025134256606.png" alt="image-20201025134256606"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个插件可以将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>2、在<code>maven</code>中选择命令，在<code>Lifecycle</code>中选择<code>package</code>进行打包；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025134620269.png" alt="image-20201025134620269"></p>
<hr>
<p>3、打好的包放在工程目录下<code>target</code>下；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025134849907.png" alt="image-20201025134849907"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025134944574.png" alt="image-20201025134944574"></p>
<hr>
<p>4、把该jar包复制出来放在一个新的文件夹，在导航栏输入<code>cmd</code>，进入控制台；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025135511000.png" alt="image-20201025135511000"></p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025135538672.png" alt="image-20201025135538672"></p>
<hr>
<p>5、输入<code>java -jar SpringBootTest-1.0-SNAPSHOT.jar</code>命令，执行该jar包，也可以将项目启动起来；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025135856979.png" alt="image-20201025135856979"></p>
<hr>
<p>6、访问<strong>localhost:8080/hello</strong>,可以正常访问，也正常返回<code>返回值</code>；</p>
<p><img src="/images/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20201025133643558.png" alt="image-20201025133643558"></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>我该何去何从</title>
    <url>/2020/03/30/%E6%88%91%E8%AF%A5%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/</url>
    <content><![CDATA[<p>家里蹲将近两个半月，<br>感觉人生迷茫，出路扑朔迷离，我身处一片迷雾之中，拨不开那重重叠叠的迷雾陷阱。<br>有一颗想要创造人生价值得心，<br>却找不到可以实现价值的方向，<br>夜里辗转反侧，脑中对于创业创新的想法在里面闹腾，在里面打架，使我难以入睡。</p>
<a id="more"></a>

<p>做完躺在床上，脑中一会儿是豆腐花在碗中蹦哒，唱着吆喝着，他叫我去摆摊卖他，<br>点开淘宝，搜索百度，搜索制造秘方，比价制造机器。<br>在一番闹腾之中，反卧在床，胸被压的喘不过气，最终手机屏幕熄灭，犹如我的心也再次暗淡，<br>任由豆腐花在那里卖力闹腾，终究没有选择第二天就出去卖他。<br>接着，千奇百怪，浮想联翩，各种各样的东西走马观花般出现在眼前。<br>有狼牙土豆，被炸的金黄，在那里翻腾；<br>有农村快递代收点，在那里唤我落户；<br>有养殖肉鸡，教我如何将它喂的白白胖胖，一旁的收购者在旁唱着歌，报出的价格让我跳起了舞；<br>有做小吃的，让我买个烤箱，几百度几百度的考出来一个有一个蛋挞；<br>有做早餐的，让我买个肠粉机，一屉又一屉的拉出来一份有一份肠粉；<br>有做定制服装的，在学校毕业典礼上，我对着一批又一批的毕业生，卖出一车又一车的纪念衫；<br>仿佛坠入了一层有一层的盗梦空间，一遍又一遍的来回逡巡，<br>终于快到凌晨。<br>纵观满脑子奇思妙想，<br>开发app卖宠物；<br>开发人脸识别零食柜，装在教学楼在一层上面；<br>开发智能机器人，上面住着一位金手指老爷爷，教你如何升级打怪，走上人生巅峰；<br>所有所有的这些想法，折磨着我，<br>明年的学费还得靠助学贷款，我自己的生活该怎么维持；<br>今年的考研计划，与经济压力迫切想要经济独立，两者冲突的越来越严重，难以认真学习；<br>家里妈妈没有工作，身体不好，我早已规划出路，却难以谋划出路，社保，医疗，保险；<br>姐姐工作多年，无存款，对未来没有规划，低薪服务员一枚，我该怎么帮助她；<br>弟弟仍在汽车维修店做学徒，他热爱王者荣耀，我可以帮助他发视频，增长一些名气，以后他独自建立维修店的时候，我能为他做些什么；<br>女朋友的未来规划，我应该以什么样的姿态去面对未来；<br>我自己的未来规划，工作几年，创业几年，成功或者失败，我自己又该何去何从；<br>我多么想，<br>有一个人，<br>在上面，<br>带带我，<br>跟我说，<br>这样走，<br>跟我说，<br>没关系，还有我。</p>
]]></content>
  </entry>
  <entry>
    <title>计划安排</title>
    <url>/2020/02/18/%E8%AE%A1%E5%88%92%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<h1 id="大三下学期课程计划"><a href="#大三下学期课程计划" class="headerlink" title="大三下学期课程计划"></a>大三下学期课程计划</h1><p>学校通知开学时间是3月2日<br>开学后课程将在网课进行<br>预计3月底可以去学校<br>但是并不确定</p>
<a id="more"></a>

<p>但是不管怎么样<br>我的学习计划得安排上<br>根据大三下学期的课程安排<br>制作了学习课程内容计划<br>内容如下<br><strong>大三下学期课程计划</strong></p>
<p><strong>1. 图形图像处理技术<br>2. 虚拟现实技术<br>3. 计算机组网技术<br>4. 软件工程<br>5. 物联网技术及开发<br>6. 嵌入式系统设计与开发</strong></p>
<p><img src="http://r.photo.store.qq.com/psc?/V12OQfIO4Rb7nr/Tiy10*PRF5enyWrLfdcKz0spWW*Iiba*5W4pwMYR49NpdFfjmSDrMtfsI3at1zgssyI5QedFI2WM4C*2rguM4srHB2Wyd5vGlA*rp3sBZMc!/r" alt=""></p>
<p>估计网课内容比较简单<br>没有深入进行教学<br>还是得自己好好准备一下学习计划<br>自己学得精通一点</p>
<p>距离<strong>考研</strong>时间越来越近<br>考研学科必须尽快安排上<br><em>考研英语、数学、政治、计科408</em>这些都要尽快安排上日程<br><strong>fighting!</strong></p>
]]></content>
  </entry>
  <entry>
    <title>武汉加油 元宵节快乐</title>
    <url>/2020/02/08/%E6%AD%A6%E6%B1%89%E5%8A%A0%E6%B2%B9-%E5%85%83%E5%AE%B5%E8%8A%82%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>庚子新年，正月十五元宵节<br>本是逛花灯吃汤圆的团圆日子<br>一场突如其来的战“疫”<br>困住了家家户户出行的脚步<br>一夜之间，南京成了一座空城<br>不出门成了本次战役的最佳“战术”</p>
<a id="more"></a>


<p>当阴霾笼罩荆楚大地<br>你像千年前的盘龙城一样沉睡不起<br>当乌云遮蔽九省通衢<br>你像被遗忘的放鹰台一样掩声而泣<br>当黑暗包裹整座江城<br>你像个无助的孩子被他们关了禁闭<br>而我们都知道，你生病了，而且有些严重</p>
<p>但是，我希望<br>你不要因为一时的沉睡而一蹶不振<br>不要因为一时的乌云密布而忘了雨过天晴<br>不要因暂时的封闭而忘记敞开心扉<br>在我心中<br>你是华中大地璀璨历史上最漂亮的一笔</p>
<p>加油，武汉！<br>我要你记得<br>国家正为你封城疗疾<br>百姓正为你日夜祈福<br>你是亿万人民足不出户间最挂念的城市</p>
<p>加油，武汉！<br>我要你记得<br>寒冬会过去，春天会如约而至<br>而你从来都不是一个人在战斗<br>我们始终与你同在<br>心系于你，共战疫情，万众一心<br>望你早日康复</p>
<p>加油，武汉！<br>我要你记得<br>只要我们坚定信心、同舟共济<br>科学防治、精准施策<br>一定能打赢此次疫情防控阻击战<br>待疫情解除，万象回春<br>让我们再一起观赏“东风夜放花千树”的繁华美景</p>
]]></content>
  </entry>
  <entry>
    <title>元宵节</title>
    <url>/2020/02/08/%E5%85%83%E5%AE%B5%E8%8A%82/</url>
    <content><![CDATA[<pre><code>元宵节，此时此刻，坐落于家中，部署我自己的个人网站；</code></pre>]]></content>
  </entry>
  <entry>
    <title>my_blog_test</title>
    <url>/2020/02/08/my-blog-test/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
